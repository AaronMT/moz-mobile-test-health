"""
Sends a message to Slack with a URL of the generated report of intermittents
and failures generated by `report.py` after upload in a Github Action step.

This script requires Python 3.x and the following dependencies:
- argparse
- logging
- os
- re
- requests
- urllib.parse

To use this script, set the SLACK_WEBHOOK environment variable to the Slack webhook URL.
"""

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import argparse
import logging
import os
import re
import sys
from urllib.parse import urlparse

import requests


def is_valid_url(url):
    """
    Validates if a given URL is valid and has the correct scheme (https).
    """
    try:
        parsed_url = urlparse(url)
        return all([parsed_url.scheme == 'https', bool(parsed_url.netloc)])
    except Exception:
        return False


def parse_args(cmdln_args):
    '''Parse command line arguments'''
    parser = argparse.ArgumentParser(
        description='Posts generated HTML report to Slack',
        epilog="Note: This script requires a Slack webhook set: SLACK_WEBHOOK)."
    )

    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument(
        '--url',
        help='URL of report (HTML)',
        dest='url',
        metavar='URL',
        type=str
    )

    args = parser.parse_args(args=cmdln_args)
    if args.url:
        if not args.url.startswith(('http://', 'https://')):
            raise argparse.ArgumentTypeError('Invalid URL: %s' % args.url)
    return args


def post_to_slack(data):
    '''Post data to Slack'''
    webhook_url = os.environ.get('SLACK_WEBHOOK')

    try:
        response = requests.post(url=str(webhook_url), json=data, timeout=15)
        response.raise_for_status()  # raise an exception if the request fails
    except requests.Timeout:
        logging.warning("Slack request timed out.")
    except requests.ConnectionError as e:
        logging.error(f"Slack request failed: {e}")
    except requests.HTTPError as e:
        logging.error(f"Slack request failed: {e}")
    except Exception as e:
        logging.error(f"Unexpected error occurred: {e}")


def main():
    args = parse_args(sys.argv[1:])

    report_name = re.search(
        r"\d{4}_\d{2}_\d{2}_\d{2}_\d{2}_\w+_(.*)\.html",
        args.url
    ).group(1).replace("-", " ").title()

    slackmoji_map = {
        'Firefox Android': ':firefox:',
        'Reference Browser': ':refbrowser:',
    }

    slackmoji = slackmoji_map.get(report_name, ":browser:")

    header = [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": ":testops-notify: Daily HTML Report"
            }
        }
    ]
    divider = [{"type": "divider"}]
    footer = [
        {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": f":testops-notify: created by [<{'https://mozilla-hub.atlassian.net/wiki/spaces/MTE/overview'}|{'Mobile Test Engineering'}>]"
                }
            ]
        }
    ]
    content = [
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": (
                    f":clipboard: *Project:* {report_name} {slackmoji}\n\n"
                    f":link: *Link:* <{args.url}|View Report>"
                ),
            },
        }
    ]

    post_to_slack({
        'blocks': header + divider + content + divider + footer,
        'text': "no-use"
    })


if __name__ == '__main__':
    main()
